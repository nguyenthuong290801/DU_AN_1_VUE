import {
  require_tooltip,
  require_util
} from "./chunk-DCVLTB5I.js";
import "./chunk-QEIVQ6XZ.js";
import {
  __commonJS
} from "./chunk-NAA53B64.js";

// node_modules/bootstrap/js/dist/popover.js
var require_popover = __commonJS({
  "node_modules/bootstrap/js/dist/popover.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require_tooltip(), require_util()) : typeof define === "function" && define.amd ? define(["./tooltip", "./util/index"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.Popover = factory(global.Tooltip, global.Index));
    })(exports, function(Tooltip, index_js) {
      "use strict";
      const NAME = "popover";
      const SELECTOR_TITLE = ".popover-header";
      const SELECTOR_CONTENT = ".popover-body";
      const Default = {
        ...Tooltip.Default,
        content: "",
        offset: [0, 8],
        placement: "right",
        template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
        trigger: "click"
      };
      const DefaultType = {
        ...Tooltip.DefaultType,
        content: "(null|string|element|function)"
      };
      class Popover extends Tooltip {
        // Getters
        static get Default() {
          return Default;
        }
        static get DefaultType() {
          return DefaultType;
        }
        static get NAME() {
          return NAME;
        }
        // Overrides
        _isWithContent() {
          return this._getTitle() || this._getContent();
        }
        // Private
        _getContentForTemplate() {
          return {
            [SELECTOR_TITLE]: this._getTitle(),
            [SELECTOR_CONTENT]: this._getContent()
          };
        }
        _getContent() {
          return this._resolvePossibleFunction(this._config.content);
        }
        // Static
        static jQueryInterface(config) {
          return this.each(function() {
            const data = Popover.getOrCreateInstance(this, config);
            if (typeof config !== "string") {
              return;
            }
            if (typeof data[config] === "undefined") {
              throw new TypeError(`No method named "${config}"`);
            }
            data[config]();
          });
        }
      }
      index_js.defineJQueryPlugin(Popover);
      return Popover;
    });
  }
});
export default require_popover();
/*! Bundled license information:

bootstrap/js/dist/popover.js:
  (*!
    * Bootstrap popover.js v5.3.2 (https://getbootstrap.com/)
    * Copyright 2011-2023 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
    *)
*/
//# sourceMappingURL=bootstrap_js_dist_popover.js.map
